/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define DEFAULT 0
#define LMOD    1
#define RMOD    2
#define NAV     3
#define NUM     4
#define FUN     5
#define MAIN    6

&mt {
    flavor = "tap-preferred";
    tapping_term_ms = <200>;
};

&lt {
    flavor = "tap-preferred";
    tapping_term_ms = <200>;
    quick_tap_ms = <125>;
    global-quick-tap;
};

&caps_word {
    // continue-list = <UNDERSCORE MINUS>;
};

&sl {
    // release-after-ms = <2000>;
};

// make this more responsive
&sk {
    // release-after-ms = <2000>;
    quick-release;
    // for callum-style mods
    /delete-property/ ignore-modifiers;
};

/ {
    combos {
        compatible = "zmk,combos";
        /*
                           KEY POSITIONS
          ╭────────────────────╮ ╭────────────────────╮
          │  0   1   2   3   4 │ │  5   6   7   8   9 │
          │ 10  11  12  13  14 │ │ 15  16  17  18  19 │
          │ 20  21  22  23  24 │ │ 25  26  27  28  29 │
          ╰───────────╮ 30  31 │ │ 32  33 ╭───────────╯
                      ╰────────╯ ╰────────╯
        */
        // Add combo for /
        combo_del {
            timeout-ms = <50>;
            key-positions = <0 1>;
            bindings = <&kp DEL>;
        };
        combo_q {
            timeout-ms = <50>;
            key-positions = <2 3>;
            bindings = <&mt LS(Q) Q>;
        };
        combo_z {
            timeout-ms = <50>;
            key-positions = <6 7>;
            bindings = <&mt LS(Z) Z>;
        };
        combo_bckspc {
            timeout-ms = <50>;
            key-positions = <17 18>;
            bindings = <&kp BSPC>;
        };
        combo_esc {
            timeout-ms = <50>;
            key-positions = <11 12>;
            bindings = <&kp ESC>;
        };
        combo_tab {
            timeout-ms = <50>;
            key-positions = <12 13>;
            bindings = <&mt LS(TAB) TAB>;
        };
        combo_ret {
            timeout-ms = <50>;
            key-positions = <16 17>;
            bindings = <&kp RET>;
        };
        combo_gt_eq {
            timeout-ms = <50>;
            key-positions = <2 13>;
            bindings = <&gt_eq>;
        };
        combo_lt_eq {
            timeout-ms = <50>;
            key-positions = <13 22>;
            bindings = <&lt_eq>;
        };
        combo_caps_word {
            timeout-ms = <50>;
            key-positions = <10 19>;
            bindings = <&caps_word>;
        };
        combo_dllr {
            timeout-ms = <50>;
            key-positions = <20 21>;
            bindings = <&kp DLLR>;
        };
        combo_caret {
            timeout-ms = <50>;
            key-positions = <28 29>;
            bindings = <&kp CARET>;
        };
        combo_num_word {
            timeout-ms = <50>;
            key-positions = <30 33>;
            bindings = <&tog NUM>;
        };
    };

    macros {
        exit_num_spc_tab: exit_num_spc_tab {
            label = "exit_num_spc_tab";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp SPACE &tog NUM>;
        };
        exit_num_spc_hold: exit_num_spc_hold {
            label = "exit_num_spc_hold";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &mo NAV>
                , <&macro_pause_for_release>
                , <&macro_release &mo NAV &tog NUM>
                ;
        };
        nt_eq: nt_eq {
            label = "nt_eq";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp EXCL &kp EQUAL>;
        };
        gt_eq: gt_eq {
            label = "gt_eq";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp GT &kp EQUAL>;
        };
        lt_eq: lt_eq {
            label = "lt_eq";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LT &kp EQUAL>;
        };
    };

    behaviors {
        qth: quick_tap_hold {
            compatible = "zmk,behavior-hold-tap";
            label = "QUICK_TAP_HOLD";
            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick_tap_ms = <125>;
            global-quick-tap;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
        slt: stick_layer_tab {
            compatible = "zmk,behavior-hold-tap";
            label = "STICKY_LAYER_TAB";
            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&mo>, <&sl>;
        };
        sht: stick_hold_tab {
            compatible = "zmk,behavior-hold-tap";
            label = "STICKY_HOLD_TAB";
            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&sk>;
        };
        // does not work
        dblh: double_hold {
            compatible = "zmk,behavior-hold-tap";
            label = "DOUBLE_HOLD";
            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick_tap_ms = <125>;
            global-quick-tap;
            flavor = "tap-preferred";
            bindings = <&kp &kp>, <&kp>;
        };
        // does not work
        trplh: triple_hold {
            compatible = "zmk,behavior-hold-tap";
            label = "TRIPLE_HOLD";
            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick_tap_ms = <125>;
            global-quick-tap;
            flavor = "tap-preferred";
            bindings = <&kp &kp &kp>, <&kp>;
        };
        ens: exit_num_spc {
            compatible = "zmk,behavior-hold-tap";
            label = "exit_num_spc";
            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick_tap_ms = <125>;
            global-quick-tap;
            flavor = "tap-preferred";
            // hold does not work
            bindings = <&exit_num_spc_hold>, <&exit_num_spc_tab>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
                &mt LS(Y) Y &mt LS(H) H &mt LS(P) P &mt LS(M) M &mt LS(B) B                           &mt RS(X) X &mt RS(F) F &kp DOT &mt RS(U) U &kp COMMA
                &mt LS(O) O &mt LS(N) N &mt LS(S) S &mt LS(I) I &mt LS(K) K                           &mt RS(J) J &mt RS(T) T &mt RS(R) R &mt RS(A) A &mt RS(C) C
                &mt SQT DQT &mt LS(W) W &mt LS(G) G &mt LS(L) L &mt &nt_eq EQUAL                      &mt MINUS UNDER &mt RS(D) D &kp LPAR &kp RPAR &mt RS(V) V
                        &slt LMOD LMOD &lt NAV SPACE  		                                                  &mt RS(E) E &slt RMOD RMOD
            >;
        };

        // good place for shortcuts like cmd+c/cmd+v
        left_mods_layer {
            bindings = <
                &slt MAIN MAIN &LG(X) &LG(V) &LG(C) &none                                             &kp SLASH &kp QMARK &kp DOT &kp HASH &kp COMMA
                &sht LSHIFT LSHIFT &sht LCTRL LCTRL &sht LALT LALT &sht LGUI LGUI &none               &kp STAR &kp COLON &kp LBRC &kp RBRC &dblh PIPE PIPE
                &none &none &none &none &none                                                         &mt MINUS UNDER &kp AT &kp LPAR &kp RPAR &kp BSLH
                        &none &none  		                                                                  &none &slt FUN FUN
            >;
        };

        right_mods_layer {
            bindings = <
                &trplh GRAVE GRAVE &dblh EXCL EXCL &dblh AMPS AMPS &kp PRCNT &dblh MINUS MINUS        &none &none &none &none &slt MAIN MAIN
                &trplh SQT SQT &dblh LT LT &dblh GT GT &kp SEMI &dblh PLUS PLUS                       &none &sht RGUI RGUI &sht RALT RALT &sht RCTRL RCTRL &sht RSHIFT RSHIFT
                &trplh DQT DQT &kp LBKT &kp RBKT &kp TILDE &dblh EQUAL EQUAL                          &none &none &none &none &none
                        &slt FUN FUN &none  		                                                          &none &none
            >;
        };

        navigation_layer {
            bindings = <
                &none &none &kp UP &none &none                                                        &none &kp HOME &kp PG_DN &kp PG_UP &kp END
                &none &kp LEFT &kp DOWN &kp RIGHT &kp RET                                             &none &kp LEFT &kp DOWN &kp UP &kp RIGHT
                &none &none &none &none &none                                                         &none &none &none &none &none
                        &none &none  		                                                                  &none &none
            >;
        };

        // maybe add vim navigations here: j,k,l,h,g
        numbers_layer {
            bindings = <
                &none &none &none &kp PERCENT &kp MINUS                                               &kp SLASH &none &kp DOT &none &kp COMMA
                &kp N7 &kp N5 &kp N3 &kp N1 &kp PLUS                                                  &kp STAR &kp N0 &kp N2 &kp N4 &kp N6
                &none &none &none &kp N9 &kp EQUAL                                                    &mt MINUS UNDER &kp N8 &kp LPAR &kp RPAR &none
                        &none &lt NAV &exit_num_spc_tab		                                                  &tog NUM &none
            >;
        };

        functions_layer {
            bindings = <
                &none &none &none &none &none                                                         &none &none &none &none &none
                &kp F7 &kp F5 &kp F3 &kp F1 &kp F11                                                   &kp F12 &kp F10 &kp F2 &kp F4 &kp F6
                &none &none &none &kp F9 &none                                                        &none &kp F8 &none &none &none
                        &none &none  		                                                                  &none &none
            >;
        };

        maintenance_layer {
            bindings = <
                &none &none &none &none &none                                                         &none &none &none &none &none
                &bt BT_CLR &none &none &none &none                                                    &none &none &none &none &none
                &bt BT_NXT &none &none &none &none                                                    &none &none &none &none &none
                        &none &none  		                                                                  &none &none
            >;
        };

        /*empty_layer {
            bindings = <
                &none &none &none &none &none                                                         &none &none &none &none &none
                &none &none &none &none &none                                                         &none &none &none &none &none
                &none &none &none &none &none                                                         &none &none &none &none &none
                        &none &none  		                                                                  &none &none
            >;
        };*/
    };
};
